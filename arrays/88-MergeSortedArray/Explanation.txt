Problem Statement:

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
 

Follow up: Can you come up with an algorithm that runs in O(m + n) time?



Explanation:

Since both arrays are already sorted, and one of the arrays has the capacity to hold all elements from nums1 and nums2, the brute force algorithm
is to simply traverse nums2, and add each element in the array to nums1 beginning at nums1[m+1]. After this is done, we can just use the Arrays package
to sort the array and return nums1.

Time Complexity: O( n log(m+n) ) due to traversing the array of n elements, and then sorting an array of m+n elements.

Space Complexity: O(1) no additional space is required in this algorithm.



Follow-Up Proposed Solution:

To cut down on time complexity and run in O(m+n), we would need to implement an algorithm with pointers, one on each of the arrays. As we traverse through nums2,
we would evaluate whether nums2[j] is greater than or less than nums1[i]....