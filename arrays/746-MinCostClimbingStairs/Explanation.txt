Problem Statement:

You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor.

 

Example 1:

Input: cost = [10,15,20]
Output: 15
Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.
Example 2:

Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
Explanation: You will start at index 0.
- Pay 1 and climb two steps to reach index 2.
- Pay 1 and climb two steps to reach index 4.
- Pay 1 and climb two steps to reach index 6.
- Pay 1 and climb one step to reach index 7.
- Pay 1 and climb two steps to reach index 9.
- Pay 1 and climb one step to reach the top.
The total cost is 6.
 

Constraints:

2 <= cost.length <= 1000
0 <= cost[i] <= 999

Explanation:

This was a surprise Dynamic Programming type of problem!

In order to solve it, we are going to work backwards from the top of the stairs, and keep track of the least expensive
way to get to that step, until we hit zero. All the while, we will update a second array of the same length as cost, but
it will hold the cost to get to that step from the top step. We simply need to fill out this array with the cost at that
step, plus the minimum of the previous two steps, and once we hit the end, we will return the minimum of the first and second
step.

Time Complexity: O(n) we have to traverse the loop

Space Complexity: O(n) but could be simplified to O(1) if we overwrite the cost[] rather than creating a second.